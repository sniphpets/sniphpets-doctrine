priority -40

global !p
import sniphpets
endglobal

snippet dcentity "Doctrine / Entity" b
<?php`!v sniphpets#header()`

namespace `!v sniphpets#namespace()`;

use Doctrine\ORM\Mapping as ORM;

#[ORM\Entity]
class `!v sniphpets#basename()`
{
	#[ORM\Id]
	#[ORM\GeneratedValue]
	#[ORM\Column(type: 'integer')]
	private ?int \$id = null;${0}
}
endsnippet

snippet dcsuper "Doctrine / Mapped superclass" b
<?php`!v sniphpets#header()`

namespace `!v sniphpets#namespace()`;

use Doctrine\ORM\Mapping as ORM;

#[ORM\MappedSuperclass]
class `!v sniphpets#basename()`
{
	#[ORM\Id]
	#[ORM\GeneratedValue]
	#[ORM\Column(type: 'integer')]
	private ?int \$id = null;${0}
}
endsnippet

snippet dcembeddable "Doctrine / Embeddable" b
<?php`!v sniphpets#header()`

namespace `!v sniphpets#namespace()`;

use Doctrine\ORM\Mapping as ORM;

#[ORM\Embeddable]
class `!v sniphpets#basename()`
{
}
endsnippet

snippet dccolumn "Doctrine / Column" b
#[ORM\Column(type: '${2:string}'${3})]
private ${1:property} = null;
endsnippet

snippet dcstring "Doctrine / Column / String" b
#[ORM\Column(type: 'string', length: ${2:255}${3})]
private ?string \$${1:name} = null;
endsnippet

snippet dctext "Doctrine / Column / Text" b
#[ORM\Column(type: 'text'${2})]
private ?string \$${1:name} = null;
endsnippet

snippet dcint "Doctrine / Column / Integer" b
#[ORM\Column(type: 'integer'${2})]
private ?int \$${1:name} = null;
endsnippet

snippet dcdecimal "Doctrine / Column / Decimal" b
#[ORM\Column(type: 'decimal', precision: ${2:0}, scale: ${3:0})]
private ?string \$${1:name} = null;
endsnippet

snippet dcdatetime "Doctrine / Column / DateTimeImmutable" b
#[ORM\Column(type: 'datetime_immutable'${2})]
private ?\DateTimeImmutable \$${1:name} = null;
endsnippet

snippet dcbool "Doctrine / Column / Boolean" b
#[ORM\Column(type: 'boolean'${2})]
private ?bool \$${1:name} = null;
endsnippet

snippet dcjson "Doctrine / Column / JSON" b
#[ORM\Column(type: 'json'${2})]
private ?array \$${1:name} = null;
endsnippet

snippet dcembed "Doctrine / Column / Embeddable"
#[ORM\Embedded(class: ${1}::class)]
private ?$1 \$${2:${1/^./\l$0/}} = null;
endsnippet

snippet dconetone "Doctrine / Association / One-to-One" b
#[ORM\OneToOne(targetEntity: ${1:Entity}::class)]
#[ORM\JoinColumn(nullable: false)]
private ?$1 \$${2:${1/^./\l$0/}} = null;
endsnippet

snippet dconetomany "Doctrine / Association / One-to-Many" b
/**
 * @var $1[]|Collection
 */
#[ORM\OneToMany(targetEntity: ${1:Entity}::class, mappedBy: '${2:`!v sniphpets#lcfirst(sniphpets#basename())`}')]
private Collection \$${4:${1/^./\l$0/}s};
endsnippet

snippet dcmanytoone "Doctrine / Association / Many-to-One" b
#[ORM\ManyToOne(targetEntity: ${1:Entity}::class${2:, inversedBy: '${3:`!v sniphpets#lcfirst(sniphpets#basename())`s}'})]
#[ORM\JoinColumn(nullable: false)]
private ?$1 \$${4:${1/^./\l$0/}} = null;
endsnippet

snippet dcmanytomany "Doctrine / Association / Many-to-Many" b
/**
 * @var $1[]|Collection
 */
#[ORM\ManyToMany(targetEntity: ${1:Entity}::class)]
private Collection \$${2:${1/^./\l$0/}s};
endsnippet

snippet dchas "Doctrine / Entity / 'Hasser' method" b
public function has${1}(${2:$1 }$${1/^./\l$0/}): bool
{
	return $this->${3:${1/^./\l$0/}s}->contains($${1/^./\l$0/});
}
endsnippet

snippet dcaddom "Doctrine / Entity / 'Adder' method (one to many)" b
public function add${1}(${2:$1 }\$${1/^./\l$0/}): void
{
	\$${1/^./\l$0/}->set${3:`!v sniphpets#basename()`}(\$this);

	if (!\$this->${4:${1/^./\l$0/}s}->contains(\$${1/^./\l$0/})) {
		\$this->$3->add(\$${1/^./\l$0/});
	}
}
endsnippet

snippet dcaddmm "Doctrine / Entity / 'Adder' method (many to many)" b
public function add${1}(${2:$1 }\$${1/^./\l$0/}): void
{
	if (!\$this->${3:${1/^./\l$0/}s}->contains(\$${1/^./\l$0/})) {
		\$this->$3->add(\$${1/^./\l$0/});
		\$${1/^./\l$0/}->add${5:`!v sniphpets#basename()`}(\$this);
	}
}
endsnippet

snippet dcremoveom "Doctrine / Entity / 'Remover' method (one to many)" b
public function remove${1}(${2:$1 }\$${1/^./\l$0/}): void
{
	if (\$this->${3:${1/^./\l$0/}s}->removeElement(\$${1/^./\l$0/})) {
		\$${1/^./\l$0/}->set${4:`!v sniphpets#basename()`}(null);
	}
}
endsnippet

snippet dcremovemm "Doctrine / Entity / 'Remover' method (many to many)" b
public function remove${1}(${2:$1 }\$${1/^./\l$0/}): void
{
	\$this->${3:${1/^./\l$0/}s}->removeElement(\$${1/^./\l$0/});
}
endsnippet

snippet dcsave "Doctrine / Entity / Persist and flush" b
\$${1:entityManager}->persist(\$${2:model});
\$$1->flush();
endsnippet
