priority -40

global !p
import sniphpets
endglobal

snippet dcentity "Doctrine / Entity" b
<?php

namespace `!v sniphpets#namespace()`;

use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Entity(${1:repositoryClass="${2:`!v sniphpets#basename()`Repository}"})
 */
class `!v sniphpets#basename()`
{
	/**
	 * @ORM\Id()
	 * @ORM\Column(type="integer")
	 * @ORM\GeneratedValue(strategy="AUTO")
	 */
	private \$id;${0}
}
endsnippet

snippet dcembeddable "Doctrine / Embeddable" b
<?php

namespace `!v sniphpets#namespace()`;

use Doctrine\ORM\Mapping as ORM;

/**
 * @ORM\Embeddable
 */
class `!v sniphpets#basename()`
{
}
endsnippet

snippet dccolumn "Doctrine / Column" b
/**
 * @ORM\Column(type="${2:string}"${3})
 */
private \$${1:name};
endsnippet

snippet dcstring "Doctrine / Column / String" b
/**
 * @ORM\Column(type="string"${3})
 *
 * @var string
 */
private \$${1:name};
endsnippet

snippet dctext "Doctrine / Column / Text" b
/**
 * @ORM\Column(type="text"${3})
 *
 * @var string
 */
private \$${1:name};
endsnippet

snippet dcint "Doctrine / Column / Integer" b
/**
 * @ORM\Column(type="integer"${3})
 *
 * @var int
 */
private \$${1:name};
endsnippet

snippet dcdatetime "Doctrine / Column / DateTime" b
/**
 * @ORM\Column(type="datetime"${3})
 *
 * @var \DateTime
 */
private \$${1:name};
endsnippet

snippet dcdatetime "Doctrine / Column / DateTimeImmutable" b
/**
 * @ORM\Column(type="datetime_immutable"${3})
 *
 * @var \DateTimeImmutable
 */
private \$${1:name};
endsnippet

snippet dcbool "Doctrine / Column / Boolean" b
/**
 * @ORM\Column(type="boolean"${3})
 *
 * @var bool
 */
private \$${1:name};
endsnippet

snippet dcjson "Doctrine / Column / JSON" b
/**
 * @ORM\Column(type="json"${3})
 *
 * @var array
 */
private \$${1:name};
endsnippet

snippet dcembed "Doctrine / Columnt / Embeddable"
/**
 * @ORM\Embedded(class="${1}")
 *
 * @var $1
 */
private \$${2:${1/^./\l$0/}};
endsnippet

snippet dconetone "Doctrine / Association / One-to-One" b
/**
 * @ORM\OneToOne(targetEntity="${1:Entity}")
 *
 * @var $1
 */
private \$${2:${1/^./\l$0/}};
endsnippet

snippet dconetomany "Doctrine / Association / One-to-Many" b
/**
 * @ORM\OneToMany(targetEntity="${1:Entity}", mappedBy="${2:`!v sniphpets#lcfirst(sniphpets#basename())`}")
 *
 * @var $1[]|Collection
 */
private \$${4:${1/^./\l$0/}s};
endsnippet

snippet dcmanytoone "Doctrine / Association / Many-to-One" b
/**
 * @ORM\ManyToOne(targetEntity="${1:Entity}"${2:, inversedBy="${3:`!v sniphpets#lcfirst(sniphpets#basename())`s}"})
 *
 * @var $1
 */
private \$${4:${1/^./\l$0/}};
endsnippet

snippet dcmanytomany "Doctrine / Association / Many-to-Many" b
/**
 * @ORM\ManyToMany(targetEntity="${1:Entity}")
 *
 * @var $1[]|Collection
 */
private \$${2:${1/^./\l$0/}s};
endsnippet

snippet dchas "Doctrine / Entity / 'Hasser' method" b
/**
 * Has `!p snip.rv = sniphpets.camel_to_snake(t[1], ' ')`.
 *
 * @param ${2/^$/mixed /}\$${1/^./\l$0/}
 *
 * @return bool
 */
public function has${1}(${2:$1 }$${1/^./\l$0/})
{
	return $this->${3:${1/^./\l$0/}s}->contains($${1/^./\l$0/});
}
endsnippet

snippet dcaddom "Doctrine / Entity / 'Adder' method (one to many)" b
/**
 * Add `!p snip.rv = sniphpets.camel_to_snake(t[1], ' ')`.
 *
 * @param ${2/^$/mixed /}\$${1/^./\l$0/}
 *
 * @return \$this
 */
public function add${1}(${2:$1 }\$${1/^./\l$0/})
{
	if (!\$this->${3:${1/^./\l$0/}s}->contains(\$${1/^./\l$0/})) {
		\$this->$3->add(\$${1/^./\l$0/});
		\$${1/^./\l$0/}->set${5:`!v sniphpets#basename()`}(\$this);
	}

	return \$this;
}
endsnippet

snippet dcaddmm "Doctrine / Entity / 'Adder' method (many to many)" b
/**
 * Add `!p snip.rv = sniphpets.camel_to_snake(t[1], ' ')`.
 *
 * @param ${2/^$/mixed /}\$${1/^./\l$0/}
 *
 * @return \$this
 */
public function add${1}(${2:$1 }\$${1/^./\l$0/})
{
	if (!\$this->${3:${1/^./\l$0/}s}->contains(\$${1/^./\l$0/})) {
		\$this->$3->add(\$${1/^./\l$0/});
		\$${1/^./\l$0/}->add${5:`!v sniphpets#basename()`}(\$this);
	}

	return \$this;
}
endsnippet

snippet dcremoveom "Doctrine / Entity / 'Remover' method (one to many)" b
/**
 * Remove `!p snip.rv = sniphpets.camel_to_snake(t[1], ' ')`.
 *
 * @param ${2/^$/mixed /}\$${1/^./\l$0/}
 *
 * @return \$this
 */
public function remove${1}(${2:$1 }\$${1/^./\l$0/})
{
	if (\$this->${3:${1/^./\l$0/}s}->contains(\$${1/^./\l$0/})) {
		\$this->$3->removeElement(\$${1/^./\l$0/});
		\$${1/^./\l$0/}->set${4:`!v sniphpets#basename()`}(null);
	}

	return \$this;
}
endsnippet

snippet dcremovemm "Doctrine / Entity / 'Remover' method (many to many)" b
/**
 * Remove `!p snip.rv = sniphpets.camel_to_snake(t[1], ' ')`.
 *
 * @param ${2/^$/mixed /}\$${1/^./\l$0/}
 *
 * @return \$this
 */
public function remove${1}(${2:$1 }\$${1/^./\l$0/})
{
	if (\$this->${3:${1/^./\l$0/}s}->contains(\$${1/^./\l$0/})) {
		\$this->$3->removeElement(\$${1/^./\l$0/});
		\$${1/^./\l$0/}->remove${4:`!v sniphpets#basename()`}(\$this);
	}

	return \$this;
}
endsnippet

snippet dcsave "Doctrine / Entity / Persist and flush" b
\$${1:entityManager}->persist(\$${2:model});
\$$1->flush();
endsnippet
